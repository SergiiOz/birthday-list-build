{"version":3,"sources":["actions/actionTypes.js","api/yaltisAPI.js","components/EmployeeCard.js","actions/actionCreators.js","components/CharList.js","components/Spiner/Spinner.js","components/EmployeesList.js","components/BirthdayCard.js","components/EmployeesBirthdayList.js","App.js","reportWebVitals.js","reducers/employeesReducer.js","reducers/reducers.js","index.js"],"names":["FETCH_EMPLOYEES","SELECT_EMPLOYEE","UNSELECT_EMPLOYEE","axios","create","baseURL","EmployeeCard","employee","useState","isActive","setIsActive","dispatch","useDispatch","onChangeStatus","event","target","value","type","payload","selectEmployee","unSelectEmployee","className","firstName","lastName","name","checked","onChange","CharList","charWithListEmployees","letter","list","length","map","id","Spinner","EmployeesList","isLoading","sortedList","setSortedList","employees","useSelector","state","listEmployees","alphabet","useEffect","sortedListUsers","arrlistUsers","arrAlphabet","forEach","char","sortedUsers","filter","user","toLowerCase","push","sortListByAlphabet","index","BirthdayCard","selectedEmployee","dob","EmployeesBirthdayList","sortedSelectedEmloyees","setSortedSelectedEmloyees","selectedEmployees","activatedEmployees","arr","sortedArray","sort","a","b","sortList","App","setIsLoading","yaltisAPI","get","response","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80eb8273.chunk.js","sourcesContent":["export const FETCH_EMPLOYEES = \"FETCH_EMPLOYEES\";\r\nexport const SELECT_EMPLOYEE = \"SELECT_EMPLOYEE\";\r\nexport const UNSELECT_EMPLOYEE = \"UNSELECT_EMPLOYEE\";\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://yalantis-react-school-api.yalantis.com/api/task0/users',\r\n});\r\n","import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { selectEmployee, unSelectEmployee } from \"./../actions/actionCreators\";\r\n\r\nconst EmployeeCard = ({ employee }) => {\r\n  const [isActive, setIsActive] = useState(\"false\");\r\n  const dispatch = useDispatch();\r\n\r\n  //get change from radio buttons\r\n  const onChangeStatus = (event) => {\r\n    setIsActive(event.target.value);\r\n\r\n    //add employee in Birthday list\r\n    if (event.target.value === \"true\") {\r\n      dispatch(selectEmployee(employee));\r\n    }\r\n    //remove employee from Birthday list\r\n    if (event.target.value === \"false\") {\r\n      dispatch(unSelectEmployee(employee));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"employee-card\">\r\n      <h4 className={isActive === \"true\" ? \"active\" : \"\"}>\r\n        {employee.firstName} {employee.lastName}\r\n      </h4>\r\n      {/* RADIO BUTTONS */}\r\n      {/* doesn't work ui checked radio button- need press doubleClick */}\r\n      <div>\r\n        <div>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"false\"\r\n              name=\"status\"\r\n              checked={isActive === \"false\"}\r\n              onChange={onChangeStatus}\r\n            />{\" \"}\r\n            Not Active\r\n          </label>\r\n        </div>\r\n\r\n        <div>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"true\"\r\n              name=\"status\"\r\n              checked={isActive === \"true\"}\r\n              onChange={onChangeStatus}\r\n            />{\" \"}\r\n            Active\r\n          </label>\r\n        </div>\r\n      </div>\r\n      {isActive}\r\n    </div>\r\n  );\r\n};\r\n\r\nEmployeeCard.propTypes = {\r\n  employee: PropTypes.object,\r\n};\r\n\r\nexport default EmployeeCard;\r\n","import {\r\n  FETCH_EMPLOYEES,\r\n  SELECT_EMPLOYEE,\r\n  UNSELECT_EMPLOYEE,\r\n} from \"./actionTypes\";\r\nimport yaltisAPI from \"./../api/yaltisAPI\";\r\n\r\n//fetch employees list\r\nexport const getEmployees = () => {\r\n  return async (dispatch) => {\r\n    const response = await yaltisAPI.get();\r\n\r\n    dispatch({\r\n      type: FETCH_EMPLOYEES,\r\n      payload: response.data,\r\n    });\r\n  };\r\n};\r\n\r\n//select epmloyee\r\nexport const selectEmployee = (employee) => {\r\n  return {\r\n    type: SELECT_EMPLOYEE,\r\n    payload: employee,\r\n  };\r\n};\r\n\r\n//unselect epmloyee\r\nexport const unSelectEmployee = (employee) => {\r\n  return {\r\n    type: UNSELECT_EMPLOYEE,\r\n    payload: employee,\r\n  };\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport EmployeeCard from \"./EmployeeCard\";\r\n\r\nconst CharList = ({ charWithListEmployees }) => {\r\n  return (\r\n    <div className=\"char-list\">\r\n      <h3 className=\"title\">{charWithListEmployees.letter}</h3>\r\n      {/* if char doesn't have list  = display text */}\r\n      {charWithListEmployees.list.length === 0 ? (\r\n        <div className=\"employee-card empty\">Employess List is empty</div>\r\n      ) : (\r\n        //else bolow char display employees list\r\n        charWithListEmployees.list.map((employee) => (\r\n          <EmployeeCard key={employee.id} employee={employee} />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  charWithListEmployees: PropTypes.object,\r\n};\r\n\r\nexport default CharList;\r\n","import './Spinner.css';\r\n\r\nconst Spinner = () => <div className=\"spinner\"></div>;\r\n\r\nexport default Spinner;\r\n","import PropTypes from \"prop-types\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CharList from \"./CharList\";\r\nimport Spinner from \"./Spiner/Spinner\";\r\n\r\nconst EmployeesList = ({ isLoading }) => {\r\n  //sort list users by char of alphabet\r\n  const [sortedList, setSortedList] = useState([]);\r\n\r\n  //get employees from state redux\r\n  const employees = useSelector((state) => state.employees.listEmployees);\r\n\r\n  //array alphabet\r\n  const alphabet = [\r\n    \"a\",\r\n    \"b\",\r\n    \"c\",\r\n    \"d\",\r\n    \"e\",\r\n    \"f\",\r\n    \"g\",\r\n    \"h\",\r\n    \"i\",\r\n    \"j\",\r\n    \"k\",\r\n    \"l\",\r\n    \"m\",\r\n    \"n\",\r\n    \"o\",\r\n    \"p\",\r\n    \"q\",\r\n    \"r\",\r\n    \"s\",\r\n    \"t\",\r\n    \"u\",\r\n    \"v\",\r\n    \"w\",\r\n    \"x\",\r\n    \"y\",\r\n    \"z\",\r\n  ];\r\n\r\n  //func sort list users by char of alphabet\r\n  const sortListByAlphabet = (arrlistUsers, arrAlphabet) => {\r\n    //new array\r\n    const sortedList = [];\r\n\r\n    arrAlphabet.forEach((char) => {\r\n      const sortedUsers = {\r\n        letter: char,\r\n        list: arrlistUsers.filter(\r\n          (user) => user.firstName[0].toLowerCase() === char\r\n        ),\r\n      };\r\n      //push to new array\r\n      sortedList.push(sortedUsers);\r\n    });\r\n\r\n    return sortedList;\r\n  };\r\n\r\n  //one time sorted list and set to sortedList\r\n  //leter will be use useMemo()\r\n  useEffect(() => {\r\n    const sortedListUsers = sortListByAlphabet(employees, alphabet);\r\n    setSortedList(sortedListUsers);\r\n  }, [employees]);\r\n\r\n  return (\r\n    <div className=\"employees-list\">\r\n      <h3 className=\"title\">Employees</h3>\r\n      {/*Spinner show when wait upload data */}\r\n      {isLoading && (\r\n        <div>\r\n          Loading... <Spinner />{\" \"}\r\n        </div>\r\n      )}\r\n\r\n      {/* EMPLOYEES LIST CONTENT */}\r\n      {/*charWithListEmployees - object with 2 field (letter and list) */}\r\n      {/* letter: - it's char alphabet (list: - it's array sorted objects employees by letter */}\r\n\r\n      <div className=\"employees-list-content\">\r\n        {sortedList.length !== 0 &&\r\n          sortedList.map((charWithListEmployees, index) => {\r\n            return (\r\n              <CharList\r\n                key={index + charWithListEmployees.letter}\r\n                charWithListEmployees={charWithListEmployees}\r\n              />\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nEmployeesList.propTypes = {\r\n  employees: PropTypes.array,\r\n  isLoading: PropTypes.bool,\r\n};\r\n\r\nexport default EmployeesList;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst BirthdayCard = ({ selectedEmployee }) => {\r\n  return (\r\n    <div className=\"birthday-card\">\r\n      <h4>\r\n        {selectedEmployee.firstName} {selectedEmployee.lastName}\r\n      </h4>\r\n      <p>Birthday: {selectedEmployee.dob}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nBirthdayCard.propTypes = {\r\n  employee: PropTypes.object,\r\n};\r\n\r\nexport default BirthdayCard;\r\n","import PropTypes from \"prop-types\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport BirthdayCard from \"./BirthdayCard\";\r\n\r\nconst EmployeesBirthdayList = () => {\r\n  //sorted list selected employees\r\n  const [sortedSelectedEmloyees, setSortedSelectedEmloyees] = useState([]);\r\n\r\n  //get selected Employees from statue redux\r\n  const selectedEmployees = useSelector(\r\n    (state) => state.employees.activatedEmployees\r\n  );\r\n\r\n  //sort list by lastName\r\n  const sortList = (arr) => {\r\n    const sortedArray = [...arr];\r\n\r\n    sortedArray.sort((a, b) => (a.lastName > b.lastName ? 1 : -1));\r\n    return sortedArray;\r\n  };\r\n\r\n  //when selected list form state redux change - sort list again\r\n  useEffect(() => {\r\n    const sortedListUsers = sortList(selectedEmployees);\r\n    setSortedSelectedEmloyees(sortedListUsers);\r\n  }, [selectedEmployees]);\r\n\r\n  return (\r\n    <div className=\"employees-birthday\">\r\n      <h3 className=\"title\">Employees Birthday</h3>\r\n      {/* if list from state redux emptye - show text */}\r\n      {selectedEmployees.length === 0 ? (\r\n        <div className=\"employee-card empty\">Employess List is empty</div>\r\n      ) : (\r\n        sortedSelectedEmloyees.map((selectedEmployee) => (\r\n          <BirthdayCard\r\n            key={selectedEmployee.id}\r\n            selectedEmployee={selectedEmployee}\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nEmployeesBirthdayList.propTypes = {\r\n  selectedEmployees: PropTypes.array,\r\n};\r\n\r\nexport default EmployeesBirthdayList;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getEmployees } from \"./actions/actionCreators\";\r\nimport \"./App.css\";\r\nimport EmployeesList from \"./components/EmployeesList\";\r\nimport EmployeesBirthdayList from \"./components/EmployeesBirthdayList\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  //fetch Employees List\r\n  useEffect(() => {\r\n    dispatch(getEmployees());\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <EmployeesList isLoading={isLoading} />\r\n      <EmployeesBirthdayList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {\r\n  FETCH_EMPLOYEES,\r\n  SELECT_EMPLOYEE,\r\n  UNSELECT_EMPLOYEE,\r\n} from \"../actions/actionTypes\";\r\n\r\nlet initialState = {\r\n  listEmployees: [],\r\n  activatedEmployees: [],\r\n};\r\n\r\nexport const employeesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_EMPLOYEES:\r\n      return {\r\n        ...state,\r\n        listEmployees: action.payload,\r\n      };\r\n    case SELECT_EMPLOYEE:\r\n      return {\r\n        ...state,\r\n        activatedEmployees: [...state.activatedEmployees, action.payload],\r\n      };\r\n    case UNSELECT_EMPLOYEE:\r\n      return {\r\n        ...state,\r\n        activatedEmployees: [\r\n          ...state.activatedEmployees.filter(\r\n            (employee) => employee.id !== action.payload.id\r\n          ),\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { employeesReducer } from './employeesReducer';\r\n\r\nconst rootReducers = combineReducers({\r\n  employees: employeesReducer,\r\n});\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './reducers/reducers';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}