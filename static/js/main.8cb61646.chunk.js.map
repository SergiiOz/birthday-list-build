{"version":3,"sources":["actions/actionTypes.js","api/yaltisAPI.js","components/EmployeeCard.js","actions/actionCreators.js","components/CharList.js","components/Spiner/Spinner.js","components/EmployeesList.js","components/BirthdayCard.js","components/EmployeesBirthdayList.js","App.js","reportWebVitals.js","reducers/employeesReducer.js","reducers/reducers.js","index.js"],"names":["FETCH_EMPLOYEES","SELECT_EMPLOYEE","UNSELECT_EMPLOYEE","axios","create","baseURL","EmployeeCard","employee","useState","isActive","setIsActive","dispatch","useDispatch","onChangeStatus","event","target","value","type","payload","selectEmployee","unSelectEmployee","className","firstName","lastName","name","checked","onChange","CharList","charWithListEmployees","letter","list","length","map","id","Spinner","EmployeesList","isLoading","sortedList","setSortedList","employees","useSelector","state","listEmployees","alphabet","useEffect","sortedListUsers","arrlistUsers","arrAlphabet","forEach","char","sortedUsers","filter","user","toLowerCase","push","sortListByAlphabet","index","BirthdayCard","selectedEmployee","dob","EmployeesBirthdayList","sortedSelectedEmloyees","setSortedSelectedEmloyees","selectedEmployees","activatedEmployees","arr","sortedArray","sort","a","b","sortList","App","setIsLoading","yaltisAPI","get","response","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAAaA,EAAkB,kBAClBC,EAAkB,kBAClBC,EAAoB,oB,QCAlBC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,mE,eCgEIC,EA9DM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,EAAgCC,mBAAS,SAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAWC,cAGXC,EAAiB,SAACC,GACtBJ,EAAYI,EAAMC,OAAOC,OAGE,SAAvBF,EAAMC,OAAOC,OACfL,ECKwB,SAACJ,GAC7B,MAAO,CACLU,KAAMhB,EACNiB,QAASX,GDREY,CAAeZ,IAGC,UAAvBO,EAAMC,OAAOC,OACfL,ECS0B,SAACJ,GAC/B,MAAO,CACLU,KAAMf,EACNgB,QAASX,GDZEa,CAAiBb,KAI9B,OACE,sBAAKc,UAAU,gBAAf,UACE,qBAAIA,UAAwB,SAAbZ,EAAsB,SAAW,GAAhD,UACGF,EAASe,UADZ,IACwBf,EAASgB,YAIjC,8BACE,iCACE,8BACE,kCACE,uBACEN,KAAK,QACLD,MAAM,QACNQ,KAAK,SACLC,QAAsB,UAAbhB,EACTiB,SAAUb,IACT,IAPL,kBAYF,8BACE,kCACE,uBACEI,KAAK,QACLD,MAAM,OACNQ,KAAK,SACLC,QAAsB,SAAbhB,EACTiB,SAAUb,IACT,IAPL,uBEtBGc,EArBE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,sBAClB,OACE,sBAAKP,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBO,EAAsBC,SAEN,IAAtCD,EAAsBE,KAAKC,OAC1B,qBAAKV,UAAU,sBAAf,qCAGAO,EAAsBE,KAAKE,KAAI,SAACzB,GAAD,OAC7B,cAAC,EAAD,CAAgCA,SAAUA,GAAvBA,EAAS0B,WCTvBC,G,MAFC,kBAAM,qBAAKb,UAAU,cCqGtBc,EAjGO,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAEvB,EAAoC5B,mBAAS,IAA7C,mBAAO6B,EAAP,KAAmBC,EAAnB,KAGMC,EAAYC,aAAY,SAACC,GAAD,OAAWA,EAAMF,UAAUG,iBAGnDC,EAAW,CACf,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KA6BF,OALAC,qBAAU,WACR,IAAMC,EArBmB,SAACC,EAAcC,GAExC,IAAMV,EAAa,GAanB,OAXAU,EAAYC,SAAQ,SAACC,GACnB,IAAMC,EAAc,CAClBrB,OAAQoB,EACRnB,KAAMgB,EAAaK,QACjB,SAACC,GAAD,OAAUA,EAAK9B,UAAU,GAAG+B,gBAAkBJ,MAIlDZ,EAAWiB,KAAKJ,MAGXb,EAMiBkB,CAAmBhB,EAAWI,GACtDL,EAAcO,KACb,CAACN,IAGF,sBAAKlB,UAAU,iBAAf,UACE,oBAAIA,UAAU,QAAd,uBAECe,GACC,8CACa,cAAC,EAAD,IAAY,OAQ3B,qBAAKf,UAAU,yBAAf,SACyB,IAAtBgB,EAAWN,QACVM,EAAWL,KAAI,SAACJ,EAAuB4B,GACrC,OACE,cAAC,EAAD,CAEE5B,sBAAuBA,GADlB4B,EAAQ5B,EAAsBC,iB,OCvEpC4B,EAfM,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBACtB,OACE,sBAAKrC,UAAU,gBAAf,UACE,+BACGqC,EAAiBpC,UADpB,IACgCoC,EAAiBnC,YAEjD,2CAAcmC,EAAiBC,WC0CtBC,EA7Ce,WAE5B,MAA4DpD,mBAAS,IAArE,mBAAOqD,EAAP,KAA+BC,EAA/B,KAGMC,EAAoBvB,aACxB,SAACC,GAAD,OAAWA,EAAMF,UAAUyB,sBAiB7B,OALApB,qBAAU,WACR,IAAMC,EATS,SAACoB,GAChB,IAAMC,EAAW,YAAOD,GAGxB,OADAC,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE7C,SAAW8C,EAAE9C,SAAW,GAAK,KACpD2C,EAKiBI,CAASP,GACjCD,EAA0BjB,KACzB,CAACkB,IAGF,sBAAK1C,UAAU,qBAAf,UACE,oBAAIA,UAAU,QAAd,gCAE8B,IAA7B0C,EAAkBhC,OACjB,qBAAKV,UAAU,sBAAf,qCAEAwC,EAAuB7B,KAAI,SAAC0B,GAAD,OACzB,cAAC,EAAD,CAEEA,iBAAkBA,GADbA,EAAiBzB,WCZnBsC,EAlBH,WACV,IAAM5D,EAAWC,cACjB,EAAkCJ,oBAAS,GAA3C,mBAAO4B,EAAP,KAAkBoC,EAAlB,KAQA,OALA5B,qBAAU,WACRjC,ENJF,uCAAO,WAAOA,GAAP,eAAAyD,EAAA,sEACkBK,EAAUC,MAD5B,OACCC,EADD,OAGLhE,EAAS,CACPM,KAAMjB,EACNkB,QAASyD,EAASC,OALf,2CAAP,uDMKEJ,GAAa,KACZ,IAGD,sBAAKnD,UAAU,YAAf,UACE,cAAC,EAAD,CAAee,UAAWA,IAC1B,cAAC,EAAD,QCRSyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCDVQ,EAAe,CACjB5C,cAAe,GACfsB,mBAAoB,ICJhBuB,EAAeC,YAAgB,CACnCjD,UDM8B,WAAmC,IAAlCE,EAAiC,uDAAzB6C,EAAcG,EAAW,uCAChE,OAAQA,EAAOxE,MACb,KAAKjB,EACH,OAAO,2BACFyC,GADL,IAEEC,cAAe+C,EAAOvE,UAE1B,KAAKjB,EACH,OAAO,2BACFwC,GADL,IAEEuB,mBAAmB,GAAD,mBAAMvB,EAAMuB,oBAAZ,CAAgCyB,EAAOvE,YAE7D,KAAKhB,EACH,OAAO,2BACFuC,GADL,IAEEuB,mBAAmB,YACdvB,EAAMuB,mBAAmBb,QAC1B,SAAC5C,GAAD,OAAcA,EAAS0B,KAAOwD,EAAOvE,QAAQe,SAIrD,QACE,OAAOQ,MCvBEiD,EAFDC,YAAYJ,EAAcK,YAAgBC,MCAxDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.8cb61646.chunk.js","sourcesContent":["export const FETCH_EMPLOYEES = \"FETCH_EMPLOYEES\";\nexport const SELECT_EMPLOYEE = \"SELECT_EMPLOYEE\";\nexport const UNSELECT_EMPLOYEE = \"UNSELECT_EMPLOYEE\";\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://yalantis-react-school-api.yalantis.com/api/task0/users',\n});\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { selectEmployee, unSelectEmployee } from './../actions/actionCreators';\n\nconst EmployeeCard = ({ employee }) => {\n  const [isActive, setIsActive] = useState('false');\n  const dispatch = useDispatch();\n\n  //get change from radio buttons\n  const onChangeStatus = (event) => {\n    setIsActive(event.target.value);\n\n    //add employee in Birthday list\n    if (event.target.value === 'true') {\n      dispatch(selectEmployee(employee));\n    }\n    //remove employee from Birthday list\n    if (event.target.value === 'false') {\n      dispatch(unSelectEmployee(employee));\n    }\n  };\n\n  return (\n    <div className=\"employee-card\">\n      <h4 className={isActive === 'true' ? 'active' : ''}>\n        {employee.firstName} {employee.lastName}\n      </h4>\n      {/* RADIO BUTTONS */}\n      {/* doesn't work ui checked radio button- need press doubleClick */}\n      <div>\n        <form>\n          <div>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"false\"\n                name=\"status\"\n                checked={isActive === 'false'}\n                onChange={onChangeStatus}\n              />{' '}\n              Not Active\n            </label>\n          </div>\n\n          <div>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"true\"\n                name=\"status\"\n                checked={isActive === 'true'}\n                onChange={onChangeStatus}\n              />{' '}\n              Active\n            </label>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nEmployeeCard.propTypes = {\n  employee: PropTypes.object,\n};\n\nexport default EmployeeCard;\n","import {\n  FETCH_EMPLOYEES,\n  SELECT_EMPLOYEE,\n  UNSELECT_EMPLOYEE,\n} from \"./actionTypes\";\nimport yaltisAPI from \"./../api/yaltisAPI\";\n\n//fetch employees list\nexport const getEmployees = () => {\n  return async (dispatch) => {\n    const response = await yaltisAPI.get();\n\n    dispatch({\n      type: FETCH_EMPLOYEES,\n      payload: response.data,\n    });\n  };\n};\n\n//select epmloyee\nexport const selectEmployee = (employee) => {\n  return {\n    type: SELECT_EMPLOYEE,\n    payload: employee,\n  };\n};\n\n//unselect epmloyee\nexport const unSelectEmployee = (employee) => {\n  return {\n    type: UNSELECT_EMPLOYEE,\n    payload: employee,\n  };\n};\n","import PropTypes from \"prop-types\";\nimport EmployeeCard from \"./EmployeeCard\";\n\nconst CharList = ({ charWithListEmployees }) => {\n  return (\n    <div className=\"char-list\">\n      <h3 className=\"title\">{charWithListEmployees.letter}</h3>\n      {/* if char doesn't have list  = display text */}\n      {charWithListEmployees.list.length === 0 ? (\n        <div className=\"employee-card empty\">Employess List is empty</div>\n      ) : (\n        //else bolow char display employees list\n        charWithListEmployees.list.map((employee) => (\n          <EmployeeCard key={employee.id} employee={employee} />\n        ))\n      )}\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  charWithListEmployees: PropTypes.object,\n};\n\nexport default CharList;\n","import './Spinner.css';\n\nconst Spinner = () => <div className=\"spinner\"></div>;\n\nexport default Spinner;\n","import PropTypes from \"prop-types\";\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CharList from \"./CharList\";\nimport Spinner from \"./Spiner/Spinner\";\n\nconst EmployeesList = ({ isLoading }) => {\n  //sort list users by char of alphabet\n  const [sortedList, setSortedList] = useState([]);\n\n  //get employees from state redux\n  const employees = useSelector((state) => state.employees.listEmployees);\n\n  //array alphabet\n  const alphabet = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n\n  //func sort list users by char of alphabet\n  const sortListByAlphabet = (arrlistUsers, arrAlphabet) => {\n    //new array\n    const sortedList = [];\n\n    arrAlphabet.forEach((char) => {\n      const sortedUsers = {\n        letter: char,\n        list: arrlistUsers.filter(\n          (user) => user.firstName[0].toLowerCase() === char\n        ),\n      };\n      //push to new array\n      sortedList.push(sortedUsers);\n    });\n\n    return sortedList;\n  };\n\n  //one time sorted list and set to sortedList\n  //leter will be use useMemo()\n  useEffect(() => {\n    const sortedListUsers = sortListByAlphabet(employees, alphabet);\n    setSortedList(sortedListUsers);\n  }, [employees]);\n\n  return (\n    <div className=\"employees-list\">\n      <h3 className=\"title\">Employees</h3>\n      {/*Spinner show when wait upload data */}\n      {isLoading && (\n        <div>\n          Loading... <Spinner />{\" \"}\n        </div>\n      )}\n\n      {/* EMPLOYEES LIST CONTENT */}\n      {/*charWithListEmployees - object with 2 field (letter and list) */}\n      {/* letter: - it's char alphabet (list: - it's array sorted objects employees by letter */}\n\n      <div className=\"employees-list-content\">\n        {sortedList.length !== 0 &&\n          sortedList.map((charWithListEmployees, index) => {\n            return (\n              <CharList\n                key={index + charWithListEmployees.letter}\n                charWithListEmployees={charWithListEmployees}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nEmployeesList.propTypes = {\n  employees: PropTypes.array,\n  isLoading: PropTypes.bool,\n};\n\nexport default EmployeesList;\n","import PropTypes from \"prop-types\";\n\nconst BirthdayCard = ({ selectedEmployee }) => {\n  return (\n    <div className=\"birthday-card\">\n      <h4>\n        {selectedEmployee.firstName} {selectedEmployee.lastName}\n      </h4>\n      <p>Birthday: {selectedEmployee.dob}</p>\n    </div>\n  );\n};\n\nBirthdayCard.propTypes = {\n  employee: PropTypes.object,\n};\n\nexport default BirthdayCard;\n","import PropTypes from \"prop-types\";\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport BirthdayCard from \"./BirthdayCard\";\n\nconst EmployeesBirthdayList = () => {\n  //sorted list selected employees\n  const [sortedSelectedEmloyees, setSortedSelectedEmloyees] = useState([]);\n\n  //get selected Employees from statue redux\n  const selectedEmployees = useSelector(\n    (state) => state.employees.activatedEmployees\n  );\n\n  //sort list by lastName\n  const sortList = (arr) => {\n    const sortedArray = [...arr];\n\n    sortedArray.sort((a, b) => (a.lastName > b.lastName ? 1 : -1));\n    return sortedArray;\n  };\n\n  //when selected list form state redux change - sort list again\n  useEffect(() => {\n    const sortedListUsers = sortList(selectedEmployees);\n    setSortedSelectedEmloyees(sortedListUsers);\n  }, [selectedEmployees]);\n\n  return (\n    <div className=\"employees-birthday\">\n      <h3 className=\"title\">Employees Birthday</h3>\n      {/* if list from state redux emptye - show text */}\n      {selectedEmployees.length === 0 ? (\n        <div className=\"employee-card empty\">Employess List is empty</div>\n      ) : (\n        sortedSelectedEmloyees.map((selectedEmployee) => (\n          <BirthdayCard\n            key={selectedEmployee.id}\n            selectedEmployee={selectedEmployee}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nEmployeesBirthdayList.propTypes = {\n  selectedEmployees: PropTypes.array,\n};\n\nexport default EmployeesBirthdayList;\n","import { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getEmployees } from \"./actions/actionCreators\";\nimport \"./App.css\";\nimport EmployeesList from \"./components/EmployeesList\";\nimport EmployeesBirthdayList from \"./components/EmployeesBirthdayList\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n\n  //fetch Employees List\n  useEffect(() => {\n    dispatch(getEmployees());\n    setIsLoading(false);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <EmployeesList isLoading={isLoading} />\n      <EmployeesBirthdayList />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  FETCH_EMPLOYEES,\n  SELECT_EMPLOYEE,\n  UNSELECT_EMPLOYEE,\n} from \"../actions/actionTypes\";\n\nlet initialState = {\n  listEmployees: [],\n  activatedEmployees: [],\n};\n\nexport const employeesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_EMPLOYEES:\n      return {\n        ...state,\n        listEmployees: action.payload,\n      };\n    case SELECT_EMPLOYEE:\n      return {\n        ...state,\n        activatedEmployees: [...state.activatedEmployees, action.payload],\n      };\n    case UNSELECT_EMPLOYEE:\n      return {\n        ...state,\n        activatedEmployees: [\n          ...state.activatedEmployees.filter(\n            (employee) => employee.id !== action.payload.id\n          ),\n        ],\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { employeesReducer } from './employeesReducer';\n\nconst rootReducers = combineReducers({\n  employees: employeesReducer,\n});\n\nconst store = createStore(rootReducers, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './reducers/reducers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}